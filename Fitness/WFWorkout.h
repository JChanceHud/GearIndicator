//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSManagedObject.h"

@class NSDate, NSNumber, NSSet, NSString, NSTimer, UBERWorkoutProfile, UIImage, UIView, WFDataNormalizer2, WFDetailedMetrics, WFSession, WFWorkoutSegment;

@interface WFWorkout : NSManagedObject
{
    WFWorkoutSegment *activeSegment;
    WFWorkoutSegment *previousSegment;
    UBERWorkoutProfile *workoutProfile;
    UIImage *workoutProfileIcon;
    NSTimer *saveContextTimer;
    int _sensorForCadence;
    int _sensorForDistance;
    int _sensorForAltitude;
    int _sensorForMotionAnalysis;
    BOOL bDistanceCadenceSensorDetermined;
    WFDataNormalizer2 *dataNormalzier;
    WFDataNormalizer2 *_dataNormalizer;
    UIView *_elevationChartView;
    UIView *_smoothnessChartView;
    UIView *_heartrateChartView;
    UIView *_cadenceChartView;
    UIView *_powerChartView;
    NSNumber *_hackedCadenceAvg;
}

+ (int)lastKnownWorkoutState;
+ (void)logStoppedWorkoutState;
+ (double)avgerageTotalDistanceWithPredicate:(id)arg1;
+ (double)sumTotalDistanceWithPredicate:(id)arg1;
+ (double)sumActiveDurationWithPredicate:(id)arg1;
+ (double)sumPausedDurationWithPredicate:(id)arg1;
+ (double)sumTotalDurationWithPredicate:(id)arg1;
+ (id)avgerageOnAttribute:(id)arg1 withPredicate:(id)arg2;
+ (id)maxOnAttribute:(id)arg1 withPredicate:(id)arg2;
+ (id)sumOnAttribute:(id)arg1 withPredicate:(id)arg2;
@property(retain, nonatomic) WFWorkoutSegment *previousSegment; // @synthesize previousSegment;
@property(retain, nonatomic) WFWorkoutSegment *activeSegment; // @synthesize activeSegment;
@property(retain, nonatomic) NSNumber *hackedCadenceAvg; // @synthesize hackedCadenceAvg=_hackedCadenceAvg;
@property(retain, nonatomic) UIView *powerChartView; // @synthesize powerChartView=_powerChartView;
@property(retain, nonatomic) UIView *cadenceChartView; // @synthesize cadenceChartView=_cadenceChartView;
@property(retain, nonatomic) UIView *heartrateChartView; // @synthesize heartrateChartView=_heartrateChartView;
@property(retain, nonatomic) UIView *smoothnessChartView; // @synthesize smoothnessChartView=_smoothnessChartView;
@property(retain, nonatomic) UIView *elevationChartView; // @synthesize elevationChartView=_elevationChartView;
@property(retain, nonatomic) WFDataNormalizer2 *dataNormalizer; // @synthesize dataNormalizer=_dataNormalizer;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSDate *startDate;
- (double)pausedTime;
- (double)runningTime;
- (double)totalTime;
- (void)writeSummaryData;
- (void)saveWorkout;
- (void)resumeWorkout;
- (void)pauseWorkout;
- (void)importFromFIT:(id)arg1 usingWorkoutRecord:(id)arg2 cancelPointer:(char *)arg3 progressPointer:(int *)arg4;
- (int)getSensorForMotionAnalysis;
- (int)getSensorForAltitude;
- (int)getSensorForDistance;
- (int)getSensorForCadence;
- (id)fitFileNameFromTime;
- (id)fitFilePath;
- (void)exportGPX:(id)arg1;
- (void)exportTCX:(id)arg1;
- (void)exportPWX:(id)arg1;
- (void)exportCSV:(id)arg1 normalizeData:(BOOL)arg2;
- (void)endWorkout;
- (void)beginWorkout:(id)arg1 withTimeOffset:(double)arg2;
- (void)beginWorkout:(id)arg1;
- (void)beginSegment:(double)arg1;
- (void)logCurrentWorkoutState;
- (void)determineDistanceCadenceDataProviders;
- (int)workoutType;
- (id)workoutProfileIcon;
- (id)displayName;
- (id)workoutProfile;
@property(readonly, nonatomic) int workoutState;
- (void)prepareForDeletion;
- (void)awakeFromFetch;
- (void)awakeFromInsert;
- (BOOL)hasMotionAnalysisSamples;
- (BOOL)hasAltimeterSamples;
- (BOOL)hasLocationSamples;
- (BOOL)hasBikePowerSamples;
- (BOOL)hasBikePowerCadenceSamples;
- (BOOL)hasFootpodSamples;
- (BOOL)hasBikeCadenceSamples;
- (BOOL)hasCadenceSamples;
- (BOOL)hasHRSamples;
- (BOOL)hasSamplesForEntityName:(id)arg1;
- (void)wf_mapElemenetsFirstCoordinate:(CDUnknownBlockType)arg1 completetion:(CDUnknownBlockType)arg2;
- (double)timeInBikePowerZoneWithLimits:(id)arg1;
- (double)calculatedTimeInBikePowerZone:(int)arg1;
- (double)timeInHeartrateZoneWithLimits:(id)arg1;
- (double)calculatedTimeInHeartrateZone:(int)arg1;
- (double)calculatedTimeInBurst;
- (double)calculatedTimeInBurn;
- (double)bestTimeInBurst;
- (double)bestTimeInBurn;
- (double)bestBurstRate;
- (double)bestBurnRate;
- (id)limitsForZone:(int)arg1 withThresholds:(id)arg2;
- (int)speedDisplayType;
- (id)stringExportForEmailBody;
- (id)stringForEmailSubject;
- (void)exportToFileAsyncWithBlock:(CDUnknownBlockType)arg1 completion:(CDUnknownBlockType)arg2;
- (id)exportToFile:(id)arg1 withBlock:(CDUnknownBlockType)arg2 error:(id *)arg3;
- (id)temporaryFilePathWithExtention:(id)arg1;
- (id)stringByRemovingIllegalFilenameCharacters:(id)arg1;
- (void)exportCSVToFile:(id)arg1 options:(unsigned int)arg2 completion:(CDUnknownBlockType)arg3;
- (id)exportCSVToFile:(id)arg1 options:(unsigned int)arg2 error:(id *)arg3;
- (void)exportGPXToFile:(id)arg1 options:(unsigned int)arg2 completion:(CDUnknownBlockType)arg3;
- (id)exportGPXToFile:(id)arg1 options:(unsigned int)arg2 error:(id *)arg3;
- (void)exportPWXToFile:(id)arg1 options:(unsigned int)arg2 completion:(CDUnknownBlockType)arg3;
- (id)exportPWXToFile:(id)arg1 options:(unsigned int)arg2 error:(id *)arg3;
- (void)exportTCXToFile:(id)arg1 options:(unsigned int)arg2 completion:(CDUnknownBlockType)arg3;
- (id)exportTCXToFile:(id)arg1 options:(unsigned int)arg2 error:(id *)arg3;

// Remaining properties
@property(retain, nonatomic) NSNumber *averageSpeed; // @dynamic averageSpeed;
@property(retain, nonatomic) NSNumber *batteryAtEnd; // @dynamic batteryAtEnd;
@property(retain, nonatomic) NSNumber *batteryAtStart; // @dynamic batteryAtStart;
@property(retain, nonatomic) NSNumber *bikeSpeedAvg; // @dynamic bikeSpeedAvg;
@property(retain, nonatomic) NSNumber *bikeSpeedDist; // @dynamic bikeSpeedDist;
@property(retain, nonatomic) NSNumber *bikeSpeedMax; // @dynamic bikeSpeedMax;
@property(retain, nonatomic) NSNumber *bikeSpeedMin; // @dynamic bikeSpeedMin;
@property(retain, nonatomic) NSNumber *cadenceAvg; // @dynamic cadenceAvg;
@property(retain, nonatomic) NSNumber *cadenceMax; // @dynamic cadenceMax;
@property(retain, nonatomic) NSNumber *cadenceMin; // @dynamic cadenceMin;
@property(retain, nonatomic) NSNumber *calories; // @dynamic calories;
@property(retain, nonatomic) NSNumber *climb; // @dynamic climb;
@property(retain, nonatomic) NSNumber *currentState; // @dynamic currentState;
@property(retain, nonatomic) WFDetailedMetrics *detailedMetrics; // @dynamic detailedMetrics;
@property(retain, nonatomic) NSNumber *elevationEnd; // @dynamic elevationEnd;
@property(retain, nonatomic) NSNumber *elevationMax; // @dynamic elevationMax;
@property(retain, nonatomic) NSNumber *elevationMin; // @dynamic elevationMin;
@property(retain, nonatomic) NSNumber *elevationStart; // @dynamic elevationStart;
@property(retain, nonatomic) NSNumber *fitTimestamp; // @dynamic fitTimestamp;
@property(retain, nonatomic) NSNumber *gpsDist; // @dynamic gpsDist;
@property(retain, nonatomic) NSNumber *gpsSpeedAvg; // @dynamic gpsSpeedAvg;
@property(retain, nonatomic) NSNumber *gpsSpeedMax; // @dynamic gpsSpeedMax;
@property(retain, nonatomic) NSNumber *gpsSpeedMin; // @dynamic gpsSpeedMin;
@property(retain, nonatomic) NSNumber *heartrateAvg; // @dynamic heartrateAvg;
@property(retain, nonatomic) NSNumber *heartrateBurnRate; // @dynamic heartrateBurnRate;
@property(retain, nonatomic) NSNumber *heartrateBurstRate; // @dynamic heartrateBurstRate;
@property(retain, nonatomic) NSNumber *heartrateMax; // @dynamic heartrateMax;
@property(retain, nonatomic) NSNumber *heartrateMin; // @dynamic heartrateMin;
@property(retain, nonatomic) NSNumber *motionCount; // @dynamic motionCount;
@property(retain, nonatomic) NSNumber *motionGroundContactAvg; // @dynamic motionGroundContactAvg;
@property(retain, nonatomic) NSNumber *motionGroundContactMax; // @dynamic motionGroundContactMax;
@property(retain, nonatomic) NSNumber *motionGroundContactMin; // @dynamic motionGroundContactMin;
@property(retain, nonatomic) NSNumber *motionSmoothnessAvg; // @dynamic motionSmoothnessAvg;
@property(retain, nonatomic) NSNumber *motionSmoothnessMax; // @dynamic motionSmoothnessMax;
@property(retain, nonatomic) NSNumber *motionSmoothnessMin; // @dynamic motionSmoothnessMin;
@property(retain, nonatomic) NSNumber *motionVerticalOscillationAvg; // @dynamic motionVerticalOscillationAvg;
@property(retain, nonatomic) NSNumber *motionVerticalOscillationMax; // @dynamic motionVerticalOscillationMax;
@property(retain, nonatomic) NSNumber *motionVerticalOscillationMin; // @dynamic motionVerticalOscillationMin;
@property(retain, nonatomic) NSString *nickname; // @dynamic nickname;
@property(retain, nonatomic) NSNumber *pausedDuration; // @dynamic pausedDuration;
@property(retain, nonatomic) NSNumber *pedalContributionSupported; // @dynamic pedalContributionSupported;
@property(retain, nonatomic) NSNumber *pedalDifferentiation; // @dynamic pedalDifferentiation;
@property(retain, nonatomic) NSNumber *pwrCadenceAvg; // @dynamic pwrCadenceAvg;
@property(retain, nonatomic) NSNumber *pwrCadenceMax; // @dynamic pwrCadenceMax;
@property(retain, nonatomic) NSNumber *pwrCadenceMin; // @dynamic pwrCadenceMin;
@property(retain, nonatomic) NSNumber *pwrDist; // @dynamic pwrDist;
@property(retain, nonatomic) NSNumber *pwrIntensityFactor; // @dynamic pwrIntensityFactor;
@property(retain, nonatomic) NSNumber *pwrNormalizedPower; // @dynamic pwrNormalizedPower;
@property(retain, nonatomic) NSNumber *pwrPowerAvg; // @dynamic pwrPowerAvg;
@property(retain, nonatomic) NSNumber *pwrPowerMax; // @dynamic pwrPowerMax;
@property(retain, nonatomic) NSNumber *pwrPowerMin; // @dynamic pwrPowerMin;
@property(retain, nonatomic) NSNumber *pwrSpeedAvg; // @dynamic pwrSpeedAvg;
@property(retain, nonatomic) NSNumber *pwrSpeedMax; // @dynamic pwrSpeedMax;
@property(retain, nonatomic) NSNumber *pwrSpeedMin; // @dynamic pwrSpeedMin;
@property(retain, nonatomic) NSNumber *pwrTorqueAvg; // @dynamic pwrTorqueAvg;
@property(retain, nonatomic) NSNumber *pwrTorqueMax; // @dynamic pwrTorqueMax;
@property(retain, nonatomic) NSNumber *pwrTorqueMin; // @dynamic pwrTorqueMin;
@property(retain, nonatomic) NSNumber *pwrWSS; // @dynamic pwrWSS;
@property(retain, nonatomic) NSNumber *pwrWork; // @dynamic pwrWork;
@property(retain, nonatomic) NSSet *segments; // @dynamic segments;
@property(retain, nonatomic) NSNumber *sensorForAltitude; // @dynamic sensorForAltitude;
@property(retain, nonatomic) NSNumber *sensorForCadence; // @dynamic sensorForCadence;
@property(retain, nonatomic) NSNumber *sensorForDistance; // @dynamic sensorForDistance;
@property(retain, nonatomic) NSNumber *sensorForMotionAnalysis; // @dynamic sensorForMotionAnalysis;
@property(retain, nonatomic) NSNumber *sensorsPresent; // @dynamic sensorsPresent;
@property(retain, nonatomic) NSNumber *sensorsWithSmartRecording; // @dynamic sensorsWithSmartRecording;
@property(retain, nonatomic) NSNumber *sensorsWithZeroAveraging; // @dynamic sensorsWithZeroAveraging;
@property(retain, nonatomic) WFSession *session; // @dynamic session;
@property(retain, nonatomic) NSNumber *startTime; // @dynamic startTime;
@property(retain, nonatomic) NSNumber *strideAvg; // @dynamic strideAvg;
@property(retain, nonatomic) NSNumber *strideDist; // @dynamic strideDist;
@property(retain, nonatomic) NSNumber *strideMax; // @dynamic strideMax;
@property(retain, nonatomic) NSNumber *strideMin; // @dynamic strideMin;
@property(retain, nonatomic) NSNumber *strideSpeedAvg; // @dynamic strideSpeedAvg;
@property(retain, nonatomic) NSNumber *strideSpeedMax; // @dynamic strideSpeedMax;
@property(retain, nonatomic) NSNumber *strideSpeedMin; // @dynamic strideSpeedMin;
@property(retain, nonatomic) NSNumber *temperatureAvg; // @dynamic temperatureAvg;
@property(retain, nonatomic) NSNumber *temperatureMax; // @dynamic temperatureMax;
@property(retain, nonatomic) NSNumber *temperatureMin; // @dynamic temperatureMin;
@property(retain, nonatomic) NSNumber *totalDistance; // @dynamic totalDistance;
@property(retain, nonatomic) NSNumber *totalDuration; // @dynamic totalDuration;
@property(copy, nonatomic) NSString *workoutProfileDisplayName; // @dynamic workoutProfileDisplayName;
@property(retain, nonatomic) NSString *workoutTypeName; // @dynamic workoutTypeName;

@end

