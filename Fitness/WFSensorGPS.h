//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "WFSensor.h"

#import "CLLocationManagerDelegate.h"

@class CLLocation, CLLocationManager, WFDataSet, WFLocationData, WFLocationSimulator, WFSlidingSet, WFWorkoutMapControler;

@interface WFSensorGPS : WFSensor <CLLocationManagerDelegate>
{
    id <WFSensorGPSDelegate> gpsDelegate;
    BOOL bSimulatorMode;
    WFLocationSimulator *locSimulator;
    CLLocationManager *locationManager;
    CLLocation *lastLocation;
    BOOL dataReady;
    WFDataSet *workoutAverageSpeed;
    WFDataSet *lapAverageSpeed;
    WFDataSet *prevLapAverageSpeed;
    WFDataSet *currentAverageSpeed;
    CDStruct_99f07a23 lapOffsets;
    CDStruct_99f07a23 prevLapOffsets;
    CDStruct_99f07a23 workoutOffsets;
    double pauseDistanceOffset;
    double dataDistanceOffset;
    WFLocationData *gpsData;
    double prevAccumDistance;
    double grade;
    double speedAverageLastLap;
    WFSlidingSet *speedTimeCalculator;
    BOOL gpsWorkoutDataValid;
    WFWorkoutMapControler *_workoutMapController;
    double gpsWorkoutDistance;
    double _gpsSpeedMeterPerSecond;
}

@property(retain, nonatomic) WFWorkoutMapControler *workoutMapController; // @synthesize workoutMapController=_workoutMapController;
@property(nonatomic) double gpsSpeedMeterPerSecond; // @synthesize gpsSpeedMeterPerSecond=_gpsSpeedMeterPerSecond;
@property(readonly) BOOL gpsWorkoutDataValid; // @synthesize gpsWorkoutDataValid;
@property(readonly) double gpsWorkoutDistance; // @synthesize gpsWorkoutDistance;
@property(nonatomic) __weak id <WFSensorGPSDelegate> gpsDelegate; // @synthesize gpsDelegate;
@property(readonly) BOOL dataReady; // @synthesize dataReady;
@property(readonly, nonatomic) CLLocation *lastLocation; // @synthesize lastLocation;
@property(retain, nonatomic) CLLocationManager *locationManager; // @synthesize locationManager;
- (void).cxx_destruct;
- (id)stringFromGPSSpeed:(CDStruct_e25eb2d1 *)arg1 averagingType:(int)arg2 forDuration:(int)arg3 displayCell:(id)arg4;
- (id)formattedGPSSpeed:(CDStruct_e25eb2d1 *)arg1 averagingType:(int)arg2 forDuration:(int)arg3;
- (id)stringFromGPSSpeed:(CDStruct_e25eb2d1 *)arg1 displayCell:(id)arg2;
- (id)formattedGPSPaceAverage:(CDStruct_e25eb2d1 *)arg1 forDuration:(int)arg2;
- (id)stringFromGPSPaceMin:(CDStruct_e25eb2d1 *)arg1 displayCell:(id)arg2;
- (id)formattedGPSPaceMin:(CDStruct_e25eb2d1 *)arg1;
- (id)stringFromGPSPaceMax:(CDStruct_e25eb2d1 *)arg1 displayCell:(id)arg2;
- (id)formattedGPSPaceMax:(CDStruct_e25eb2d1 *)arg1;
- (id)stringFromGPSPaceAverage:(CDStruct_e25eb2d1 *)arg1 forDuration:(int)arg2 displayCell:(id)arg3;
- (id)stringFromGPSPaceInstant:(CDStruct_e25eb2d1 *)arg1 displayCell:(id)arg2;
- (id)formattedGPSPaceInstant:(CDStruct_e25eb2d1 *)arg1;
- (id)formattedGPSSpeed:(CDStruct_e25eb2d1 *)arg1;
- (id)formattedGPSGrade;
- (id)formattedGPSDescentWorkout;
- (id)formattedGPSDescentLastLap;
- (id)formattedGPSDescentLap;
- (id)formattedGPSAscentWorkout;
- (id)formattedGPSAscentLastLap;
- (id)formattedGPSAscentLap;
- (id)stringFromGPSDistance:(CDStruct_e25eb2d1 *)arg1 forDuration:(int)arg2 displayCell:(id)arg3;
- (id)formattedGPSDistance:(CDStruct_e25eb2d1 *)arg1 forDuration:(int)arg2;
- (id)formattedGPSHeading;
- (id)stringFromGPSHeading;
- (id)formattedGPSElevation:(CDStruct_e25eb2d1 *)arg1;
- (id)formattedGPSElevation;
- (id)formattedGPSAccuracy;
- (id)formattedGPSLatitude;
- (id)formattedGPSLongitude;
- (double)accumDistance;
- (void)setDistanceFilter:(double)arg1;
- (void)setAccuracy:(double)arg1;
- (void)setConnected:(BOOL)arg1;
- (void)setInterrupted:(BOOL)arg1;
- (BOOL)isLocationAvailable;
- (void)simSettingsUpdated:(id)arg1;
- (void)createSpeedTimeCalculator:(BOOL)arg1;
- (void)writeSummaryForWorkout:(id)arg1;
- (void)writeSummaryForSegment:(id)arg1;
- (BOOL)resetOffsets;
- (void)resumeWorkout;
- (void)pauseWorkout;
- (void)endWorkout:(id)arg1;
- (void)endSegment:(id)arg1;
- (BOOL)beginWorkout:(id)arg1;
- (void)beginSegment;
- (void)processData:(id)arg1;
- (void)stopHardwareStatusListener;
- (void)startHardwareStatusListener;
- (BOOL)shouldDisplayData:(id *)arg1 displaysWhenStale:(BOOL)arg2;
- (void)updateSensorStatus;
- (void)disconnect;
- (id)requestSensorConnection:(id)arg1;
- (BOOL)hasMatchingConnectionParams:(id)arg1;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateToLocation:(id)arg2 fromLocation:(id)arg3;
- (void)locationManagerDidResumeLocationUpdates:(id)arg1;
- (void)locationManagerDidPauseLocationUpdates:(id)arg1;
- (void)locationManager:(id)arg1 didFinishDeferredUpdatesWithError:(id)arg2;
- (BOOL)isSimulatorMode;
- (int)sensorType;
- (id)init;
- (void)dealloc;

@end

