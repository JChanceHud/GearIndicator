//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "WFSensor.h"

#import "CLLocationManagerDelegate.h"

@class CLLocation, CLLocationManager, CMMotionManager, NSMutableArray, NSOperationQueue, NSTimer, WFDataSet, WFGPSLocationData, WFSlidingSet;

@interface WFSensorAccelerometer : WFSensor <CLLocationManagerDelegate>
{
    CLLocationManager *locationManager;
    CLLocation *lastLocation;
    BOOL dataReady;
    WFDataSet *workoutAverageSpeed;
    WFDataSet *lapAverageSpeed;
    WFDataSet *prevLapAverageSpeed;
    WFDataSet *workoutAverageCadence;
    WFDataSet *lapAverageCadence;
    WFDataSet *prevLapAverageCadence;
    double pauseDistanceOffset;
    double dataDistanceOffset;
    double workoutAccumulatedSpeed;
    double workoutAccumulatedCadence;
    double workoutLastSampleTime;
    double workoutLastSampleDuration;
    double workoutAccumulatedCadenceTime;
    double workoutAccumulatedSpeedTime;
    double lapAccumulatedSpeed;
    double lapAccumulatedCadence;
    double lapLastSampleTime;
    double lapLastSampleDuration;
    double pauseStartTime;
    double lapAccumulatedCadenceTime;
    double lapAccumulatedSpeedTime;
    WFGPSLocationData *gpsData;
    WFSlidingSet *speedTimeCalculator;
    WFSlidingSet *cadenceTimeCalculator;
    NSMutableArray *coeffs;
    CMMotionManager *motionManager;
    CLLocationManager *gpsManager;
    NSOperationQueue *accelerationQueue;
    NSOperationQueue *gyroQueue;
    NSTimer *resetTimer;
    int countUntillReset;
    NSMutableArray *gpsLocationArray;
    double gpsCompensation;
    double gpsCompensationGain;
    double averageIMUSpeed;
    unsigned int imuStatsCounter;
    BOOL recursiveLeastSquaresOn;
    float maxAx;
    float maxAy;
    float maxAz;
    float maxWx;
    float maxWy;
    float maxWz;
    float minAx;
    float minAy;
    float minAz;
    float minWx;
    float minWy;
    float minWz;
    float meanAx;
    float meanWz;
    float varAx;
    float varWz;
    float varAxCounter;
    float varWzCounter;
    float gpsAltitude;
    float varianceIMUSpeed;
    int _phoneOrientation;
    double speedEstimate;
    double stepRateEstimate;
    double averageGPSSpeed;
}

@property(readonly) int phoneOrientation; // @synthesize phoneOrientation=_phoneOrientation;
@property float varianceIMUSpeed; // @synthesize varianceIMUSpeed;
@property float gpsAltitude; // @synthesize gpsAltitude;
@property float varWzCounter; // @synthesize varWzCounter;
@property float varAxCounter; // @synthesize varAxCounter;
@property float varWz; // @synthesize varWz;
@property float varAx; // @synthesize varAx;
@property float meanWz; // @synthesize meanWz;
@property float meanAx; // @synthesize meanAx;
@property float minWz; // @synthesize minWz;
@property float minWy; // @synthesize minWy;
@property float minWx; // @synthesize minWx;
@property float minAz; // @synthesize minAz;
@property float minAy; // @synthesize minAy;
@property float minAx; // @synthesize minAx;
@property float maxWz; // @synthesize maxWz;
@property float maxWy; // @synthesize maxWy;
@property float maxWx; // @synthesize maxWx;
@property float maxAz; // @synthesize maxAz;
@property float maxAy; // @synthesize maxAy;
@property float maxAx; // @synthesize maxAx;
@property BOOL recursiveLeastSquaresOn; // @synthesize recursiveLeastSquaresOn;
@property double averageGPSSpeed; // @synthesize averageGPSSpeed;
@property double stepRateEstimate; // @synthesize stepRateEstimate;
@property double speedEstimate; // @synthesize speedEstimate;
@property(readonly) BOOL dataReady; // @synthesize dataReady;
@property(readonly, nonatomic) CLLocation *lastLocation; // @synthesize lastLocation;
@property(retain, nonatomic) CLLocationManager *locationManager; // @synthesize locationManager;
- (void).cxx_destruct;
- (id)stringFromAccelerometerCadence:(CDStruct_e25eb2d1 *)arg1 displayCell:(id)arg2;
- (id)formattedAccelerometerCadence:(CDStruct_e25eb2d1 *)arg1;
- (id)stringFromAccelerometerCadenceMin:(CDStruct_e25eb2d1 *)arg1 displayCell:(id)arg2;
- (id)formattedAccelerometerCadenceMin:(CDStruct_e25eb2d1 *)arg1;
- (id)stringFromAccelerometerCadenceMax:(CDStruct_e25eb2d1 *)arg1 displayCell:(id)arg2;
- (id)formattedAccelerometerCadenceMax:(CDStruct_e25eb2d1 *)arg1;
- (id)stringFromAccelerometerCadenceAverage:(CDStruct_e25eb2d1 *)arg1 forDuration:(int)arg2 displayCell:(id)arg3;
- (id)formattedAccelerometerCadenceAverage:(CDStruct_e25eb2d1 *)arg1 forDuration:(int)arg2;
- (void)setDistanceFilter:(double)arg1;
- (void)setAccuracy:(double)arg1;
- (void)setConnected:(BOOL)arg1;
- (void)setInterrupted:(BOOL)arg1;
- (BOOL)isLocationAvailable;
- (void)createSpeedTimeCalculator:(BOOL)arg1;
- (void)writeSummaryForWorkout:(id)arg1;
- (void)writeSummaryForSegment:(id)arg1;
- (void)saveRegressionCoefficientsToFile;
- (void)getRegressionCoefficientsFromFile;
- (BOOL)resetOffsets;
- (void)resumeWorkout;
- (void)pauseWorkout;
- (void)endWorkout:(id)arg1;
- (void)endSegment:(id)arg1;
- (BOOL)beginWorkout:(id)arg1;
- (void)beginSegment;
- (void)processData:(id)arg1;
- (void)processDataOnMainThread;
- (void)stopHardwareStatusListener;
- (void)startHardwareStatusListener;
- (BOOL)shouldDisplayData:(id *)arg1 displaysWhenStale:(BOOL)arg2;
- (void)updateSensorStatus;
- (void)disconnect;
- (id)requestSensorConnection:(id)arg1;
- (void)updatePhoneOrientation:(id)arg1;
- (double)estimateSpeedFromNewLocation:(id)arg1 andOldLocation:(id)arg2;
- (void)resetIMUSpeedStats;
@property(readonly) BOOL isReadyForSpeedControl;
- (void)updateIMUSpeedStats:(double)arg1;
- (void)updateGPScompensation:(id)arg1;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateToLocation:(id)arg2 fromLocation:(id)arg3;
- (void)updateResetCounter;
- (void)resetSpeedToZero;
- (void)newStrideDetectedWithStrideTime:(float)arg1 atTime:(double)arg2;
- (void)updateStrideDetection:(id)arg1;
- (void)updateStats:(id)arg1;
- (void)processGyro:(id)arg1 withError:(id)arg2;
- (void)processAcceleration:(id)arg1 withError:(id)arg2;
- (void)postNewSpeedNotification;
- (void)estimateSpeedForTime:(double)arg1;
- (void)dealloc;
- (int)sensorType;
- (id)init;

@end

